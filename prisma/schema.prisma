generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model User {
  id            String    @id @default(cuid())
  clerkId       String    @unique
  email         String    @unique
  firstName     String?
  lastName      String?
  imageUrl      String?
  role          Role      @default(USER)
  phone         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  cart          Cart?
  addresses     Address[]
  orders        Order[]    // Renamed from order to orders for clarity
}

model Address {
  id            String    @id @default(cuid())
  street        String
  city          String
  state         String
  postalCode    String
  country       String
  isDefault     Boolean   @default(false)
  userId        String
  user          User      @relation(fields: [userId], references: [clerkId])

  @@index([userId])
}

model Product {
  id            String      @id @default(cuid())
  name          String?
  description   String?
  price         Int?
  stock         Int?
  loction       String      // Note: "loction" might be a typo of "location"
  miles         String
  images        Image[]
  categoryId    String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  cartItems     CartItem[]  // Add relation to CartItem
  orderItems    OrderItem[] // Add relation to OrderItem

  @@index([categoryId])
}

model Image {
  id         String   @id @default(cuid())
  url        String
  productId  String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
}

model Cart {
  id        String      @id @default(cuid())
  userId    String      @unique
  user      User        @relation(fields: [userId], references: [clerkId])
  items     CartItem[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([userId])
}

model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id]) // Add product relation
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([cartId, productId])
  @@index([cartId])
  @@index([productId])
}

model Order {
  id              String      @id @default(cuid())
  amount          Int
  status          OrderStatus @default(PENDING) // Changed to use OrderStatus enum
  email           String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  paymentIntentId String?     @unique
  items           OrderItem[]
  userId          String
  user            User        @relation(fields: [userId], references: [clerkId])
  shippingAddress ShippingAdress?     // Add shipping address
  
  @@index([userId])
  @@index([paymentIntentId])

  

}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  order     Order    @relation(fields: [orderId], references: [id])
  productId String
  product   Product  @relation(fields: [productId], references: [id]) // Add product relation
  quantity  Int
  price     Int      // Price at time of order
  
  @@index([orderId])
  @@index([productId])
}

model ShippingAdress {
  id            String    @id @default(cuid())
  street        String
  city          String
  state         String
  postalCode    String
  country       String
  isDefault     Boolean   @default(true)
  orderId   String     @unique
  order     Order    @relation(fields: [orderId], references: [id])

  @@index([orderId])
}
